package com.example.vaiche_driver.navigation

import android.content.Context
import android.graphics.Color
import com.mapbox.maps.Style
import com.mapbox.navigation.base.route.NavigationRoute
import com.mapbox.navigation.base.trip.model.RouteProgress
import com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineApi
import com.mapbox.navigation.ui.maps.route.line.api.MapboxRouteLineView
import com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineApiOptions
import com.mapbox.navigation.ui.maps.route.line.model.MapboxRouteLineViewOptions
import com.mapbox.navigation.ui.maps.route.line.model.RouteLineColorResources

/**
 * Route line renderer cho Mapbox Navigation UI 3.11.x
 * - D√πng ApiOptions/ViewOptions
 * - Vanishing route line ƒë√£ t√≠ch h·ª£p s·∫µn
 * - Render qua Style
 */
class RouteRenderer(context: Context) {

    private val apiOptions = MapboxRouteLineApiOptions
        .Builder()
        .build()

    // üëá M√†u cho ph·∫ßn ƒë√£ ƒëi: TRONG SU·ªêT
    private val colorRes = RouteLineColorResources
        .Builder()
        .routeLineTraveledColor(Color.TRANSPARENT)
        .routeLineTraveledCasingColor(Color.TRANSPARENT)
        // (tu·ª≥ ch·ªçn) l√†m casing nh·∫°t h∆°n, m√†u c√≤n l·∫°i gi·ªØ nguy√™n
        // .inactiveRouteLegsColor(‚Ä¶)
        .build()
    private val viewOptions = MapboxRouteLineViewOptions
        .Builder(context)
        .build()

    private val routeLineApi  = MapboxRouteLineApi(apiOptions)
    private val routeLineView = MapboxRouteLineView(viewOptions)

    /** G√°n danh s√°ch routes v√† v·∫Ω l√™n map */
    fun setRoutes(style: Style, routes: List<NavigationRoute>) {
        routeLineApi.setNavigationRoutes(routes) { drawData ->
            routeLineView.renderRouteDrawData(style, drawData)
        }
    }

    /** G·ªçi trong RouteProgressObserver ƒë·ªÉ c·∫≠p nh·∫≠t vanishing/active leg */
    fun onRouteProgress(style: Style, progress: RouteProgress) {
        routeLineApi.updateWithRouteProgress(progress) { update ->
            routeLineView.renderRouteLineUpdate(style, update)
        }
    }

    /** X√≥a route line kh·ªèi Style */
    fun clear(style: Style) {
        routeLineApi.clearRouteLine { cleared ->
            routeLineView.renderClearRouteLineValue(style, cleared)
        }
    }

    /** H·ªßy t√°c v·ª• n·ªÅn khi destroy */
    fun cancel() {
        routeLineApi.cancel()
        routeLineView.cancel()
    }
}
